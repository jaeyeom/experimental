#+TITLE: GitHub Nudge
#+AUTHOR: Jaehyun Yeom
#+DATE: 2025-03-19

* GitHub Nudge

A tool that finds pending code reviews on GitHub and nudges reviewers via Slack.

** Overview

GitHub Nudge is a utility designed to improve code review workflow by
automatically identifying stalled pull requests and sending gentle reminders to
assigned reviewers through Slack. This helps maintain momentum in the
development process and reduces delays in merging important changes.

** Features
- Uses GitHub CLI (`gh`) to identify pending pull requests
- Filters PRs based on configurable criteria (age, labels, etc.)
- Sends customized notifications to reviewers via Slack DMs
- Maps GitHub usernames to Slack usernames for proper @mentions
- Routes notifications to appropriate Slack channels based on file patterns in PRs
- Configurable reminder schedules and message templates
- Tracks notification history to prevent excessive reminders

** TODO Implementation [3/7]
- [X] Set up GitHub CLI integration
- [ ] Implement PR filtering logic
- [X] Create GitHub-to-Slack username mapping
- [X] Implement Slack DM integration
- [ ] Add file pattern matching for channel routing
- [ ] Build notification scheduling system
- [ ] Add configuration options

** Prerequisites

1. [[https://cli.github.com/][Github CLI]] installed and authenticated
2. Slack API token for sending notifications

*** Obtaining a Slack API Token

To get a Slack API token for GitHub Nudge:

1. *Create a Slack App*:
   - Go to the [[https://api.slack.com/apps][Slack API website]]
   - Click "Create New App"
   - Choose "From scratch"
   - Name your app (e.g., "GitHub Nudge") and select your workspace
   - Click "Create App"

2. *Add Bot Permissions*:
   - In the left sidebar, click on "OAuth & Permissions"
   - Scroll down to "Scopes" section
   - Under "Bot Token Scopes", add the following permissions:
     - ~chat:write~ (to send messages)
     - ~im:write~ (to send direct messages)
     - ~users:read~ (to look up user information)

3. *Install App to Workspace*:
   - Scroll up to the top of the "OAuth & Permissions" page
   - Click "Install to Workspace"
   - Review the permissions and click "Allow"

4. *Get Your Bot Token*:
   - After installation, you'll be redirected back to the "OAuth & Permissions" page
   - Copy the "Bot User OAuth Token" that starts with ~xoxb-~
   - This is the token you'll need to add to your configuration file under ~slack.token~

*Note*: Slack tokens are sensitive credentials. Consider using environment variables or a secrets manager in production environments rather than hardcoding the token in your configuration file.

** Installation

#+begin_src shell
  go install github.com/jaeyeom/experimental/devtools/gh-nudge@latest
#+end_src

** Configuration

Create a configuration file at ~$HOME/.config/gh-nudge/config.yaml~ with the following structure:

#+begin_src yaml
  github:
    owner: "organization-name"  # Optional, defaults to authenticated user
    repos:
      - "repo-name-1"
      - "repo-name-2"

  slack:
    token: "your-slack-token"
    default_channel: "#code-reviews"  # Fallback channel if no patterns match

    # GitHub username to Slack user ID mapping
    user_mapping:
      "github-username-1": "slack-user-id-1"
      "github-username-2": "slack-user-id-2"

    # Channel routing based on file patterns
    channel_routing:
      - pattern: "frontend/.*\\.js$"
        channel: "#frontend"
      - pattern: "backend/.*\\.go$"
        channel: "#backend"
      - pattern: "docs/.*"
        channel: "#documentation"

  settings:
    reminder_threshold_hours: 24
    working_hours_only: true
    message_template: "Hey <@{slack_id}>, the PR '{title}' has been waiting for your review for {hours} hours. {url}"
    dm_by_default: true  # Send DMs to reviewers by default
#+end_src

** Usage

#+begin_src shell
  # Run with default configuration
  gh-nudge

  # Specify a custom configuration file
  gh-nudge --config /path/to/config.yaml

  # Run in dry-run mode (no notifications sent)
  gh-nudge --dry-run

  # Show verbose output
  gh-nudge --verbose
#+end_src

** Development

This project follows Test Driven Development practices. To contribute:

1. Write tests for new functionality
2. Implement the feature
3. Ensure all tests pass
4. Submit a pull request

#+begin_src shell
  # Run formatter, tests and linter
  make format test lint
#+end_src

** License

MIT
