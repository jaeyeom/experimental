#+TITLE: CODEOWNERS Utility Requirements
#+AUTHOR: Jaehyun Yeom
#+DATE: 2025-04-16

* Purpose

This document describes the requirements for a utility that parses GitHub's CODEOWNERS file and, given a list of files, determines the owner teams for those files.

* Command Line Tool Usage

The ~gh-codeowners~ command line tool helps you identify code owners for files in your repository based on GitHub's CODEOWNERS file rules.

** Installation

#+begin_src shell
  # Install using go install
  go install github.com/jaeyeom/experimental/devtools/gh-nudge/cmd/gh-codeowners@latest
#+end_src

** Basic Usage

#+begin_src shell
  # Find owners for specific files using the default CODEOWNERS location
  gh-codeowners file1.go path/to/file2.js

  # Specify a custom CODEOWNERS file location
  gh-codeowners --codeowners-file=/path/to/CODEOWNERS file1.go

  # Process files from stdin (one file per line)
  git diff --name-only | gh-codeowners
#+end_src

** Output Format

The output is a simple tab-separated format where each line shows a file and one owner. If a file has multiple owners, it will appear on multiple lines (once for each owner):

#+begin_example
file1.go        @myorg/api-reviewers
file1.go        @myorg/go-readability-reviewers
file2.js        @myorg/frontend-reviewers
#+end_example

This format makes it easy to process with standard Unix tools like ~grep~, ~awk~, and ~sort~.

** Options

| Flag                | Description                                                | Default                     |
|---------------------+------------------------------------------------------------+-----------------------------|
| ~--codeowners-file~ | Path to CODEOWNERS file                                    | CODEOWNERS                  |
| ~--help~            | Display help information                                   |                             |
| ~--version~         | Display version information                                |                             |

** Examples

#+begin_src shell
  # Find owners for all Go files in the repository
  find . -name "*.go" | gh-codeowners

  # Use with git diff to find owners for changed files
  git diff --name-only HEAD~1 HEAD | gh-codeowners

  # Find owners for files modified in the current branch compared to main
  git diff --name-only main... | gh-codeowners

  # Count how many files each team owns in the current changes
  git diff --name-only main... | gh-codeowners | cut -f2 | sort | uniq -c | sort -nr
#+end_src

** Exit Codes

| Code | Description                      |
|------+----------------------------------|
| 0    | Success                          |
| 1    | Error reading CODEOWNERS file    |
| 2    | Error processing input files     |
| 3    | Invalid command line arguments   |

* Background

GitHub's CODEOWNERS file defines code ownership rules for a repository. Each rule consists of a pattern and one or more owners (users or teams). The rules are matched in order, and the last matching rule for a file determines its owners.

* Example CODEOWNERS File

#+begin_example
# This line is a comment

*                                                                   @myorg/root-reviewers
package.json                                                        @myorg/package-reviewers
/myorg/api/**                                                       @myorg/api-reviewers
/myorg/api/**/*.proto                                               @myorg/public-api-proto-reviewers
/myorg/cloud/**                                                     @myorg/cloud-reviewers
/myorg/device/**                                                    @myorg/universe-msa-reviewers

## READABILITY
**/*.go                         @myorg/go-readability-reviewers
#+end_example

* Custom Section-Based Matching (Project-Specific)

- In this project, the CODEOWNERS file is divided into sections (e.g., separated by org headings like `*`, `**`, or comments like `## SECTION`).
- For each section, the last matching rule for a file is considered.
- The owners for a file are the union of the last matches from all sections.
- This allows directory-based and extension-based matches to co-exist, and both sets of owners will be notified/assigned.

* Requirement

- The utility should accept as input:
  1. The path to a CODEOWNERS file (or its content)
  2. A list of file paths to check

- For each file in the list, the utility should:
  - Find the last matching pattern in each section of the CODEOWNERS file (ignoring comments and blank lines)
  - Return the owners (teams or users) associated with those patterns, as the union of the last matches from all sections

* Expected Behavior

- For a file, the owners from the last matching rule in each section are included in the result.
- The utility should support all CODEOWNERS pattern syntax (including globs, directories, and comments).
- If no rule matches in a section, that section does not contribute to the file's owners.
- If no rule matches in any section, the file has no owners (empty result).

* Example (Section-Based)

Given the above CODEOWNERS file:

| File Path            | Section Owners (last match per section)                            | Owner(s) (union)                                                   |
|----------------------+--------------------------------------------------------------------+--------------------------------------------------------------------|
| package.json         | @myorg/package-reviewers                                           | @myorg/package-reviewers                                           |
| myorg/api/foo.go     | @myorg/api-reviewers, @myorg/go-readability-reviewers              | @myorg/api-reviewers, @myorg/go-readability-reviewers              |
| myorg/api/foo.proto  | @myorg/public-api-proto-reviewers, @myorg/go-readability-reviewers | @myorg/public-api-proto-reviewers, @myorg/go-readability-reviewers |
| myorg/cloud/bar.txt  | @myorg/cloud-reviewers                                             | @myorg/cloud-reviewers                                             |
| myorg/device/baz.txt | @myorg/universe-msa-reviewers                                      | @myorg/universe-msa-reviewers                                      |
| foo.go               | @myorg/root-reviewers, @myorg/go-readability-reviewers             | @myorg/root-reviewers, @myorg/go-readability-reviewers             |
| unknown.txt          | @myorg/root-reviewers                                              | @myorg/root-reviewers                                              |

- Note: Each section is processed independently. For each section, the last matching rule for a file is used. The owners for a file are the union of the last matches from all sections.

* Edge Cases and Notes

- Section boundaries are defined by org headings (e.g., `*`, `**`, or comments like `## ...`).
- Comments (lines starting with #) and blank lines are ignored.
- Patterns may overlap; the last match within each section wins.
- Patterns can use glob syntax (e.g., *, **, ?).
- Owners can be users (@username) or teams (@org/team).
- The utility should be robust to whitespace and formatting variations.

* Previous (GitHub Standard) Behavior

- For reference, GitHub's default behavior is to use only the last matching rule globally.
- This project intentionally diverges from that for more flexible notifications/assignments.

* Future Extensions

- Support for validating CODEOWNERS syntax
- Listing all files and their owners in a repository
- Integration with other GitHub utilities in this project
