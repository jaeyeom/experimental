#+TITLE: gh-pr-review - GitHub PR Review CLI Utility

* GitHub PR Review CLI Utility

** Overview

A command-line utility for managing GitHub Pull Request review comments with
intelligent diff tracking and atomic comment operations. This tool captures PR
diff hunks, manages line-specific comments, and submits reviews using the GitHub
API.

** Features

- **Diff Capture**: Automatically captures and stores GitHub PR diff hunks in
  structured format
- **Local Branch Support**: Review local git branches without creating PRs
- **Comment Management**: Add line-specific comments with duplicate detection
  and validation
- **Atomic Operations**: Uses OS file locking to ensure thread-safe operations
- **GitHub Integration**: Seamlessly integrates with GitHub API via `gh` CLI
- **Draft Reviews**: Creates pending review comments for review before
  submission
- **Parallel Access**: Multiple LLM instances can review code in parallel

** Architecture

*** Storage Structure

The utility uses the unified gh-nudge storage system under `~/.config/gh-nudge/`:

#+BEGIN_EXAMPLE
~/.config/gh-nudge/
├── config.yaml                    # Main configuration
├── storage/                       # Unified storage
│   ├── metadata.json              # Storage metadata and versioning
│   ├── repos/                     # GitHub-structured data
│   │   └── owner/
│   │       └── repo/
│   │           ├── metadata.json  # Repo-level metadata
│   │           ├── pull/
│   │           │   └── 123/       # PR number
│   │           │       ├── diff-hunks.json
│   │           │       ├── comments.json
│   │           │       ├── notifications.json
│   │           │       └── metadata.json
│   │           └── branch/
│   │               └── feature_auth/  # Branch name (/ replaced with _)
│   │                   ├── diff-hunks.json
│   │                   ├── comments.json
│   │                   └── metadata.json
│   └── cache/                    # Cached data (GitHub API responses)
│       ├── github/
│       │   ├── repos/
│       │   └── users/
│       └── temp/                 # Temporary files
├── logs/                         # Application logs
└── backups/                      # Automatic backups
#+END_EXAMPLE

*** Data Format

**** Diff Hunks Structure
#+BEGIN_SRC json
{
  "pr_number": 123,
  "owner": "username",
  "repo": "repository",
  "captured_at": "2025-07-09T12:00:00Z",
  "diff_hunks": [
    {
      "file": "path/to/file.js",
      "side": "RIGHT",
      "start_line": 10,
      "end_line": 15,
      "content": "...",
      "sha": "abc123..."
    }
  ]
}
#+END_SRC

**** Comments Structure
#+BEGIN_SRC json
{
  "pr_number": 123,
  "owner": "username",
  "repo": "repository",
  "comments": [
    {
      "path": "path/to/file.js",
      "line": 12,
      "body": "Consider using const instead of let",
      "side": "RIGHT",
      "sha": "abc123...",
      "created_at": "2025-07-09T12:00:00Z",
      "source": "local"
    },
    {
      "path": "path/to/file.js",
      "line": 18,
      "start_line": 15,
      "body": "This function needs refactoring",
      "side": "RIGHT",
      "sha": "abc123...",
      "created_at": "2025-07-09T12:00:00Z",
      "source": "github",
      "github_id": 987654321,
      "author": "reviewer123",
      "updated_at": "2025-07-09T12:15:00Z"
    }
  ]
}
#+END_SRC

** Installation

*** Prerequisites

- GitHub CLI (`gh`) installed and authenticated
- Go 1.21 or later
- Unix-like system with file locking support

*** Install via Go

#+BEGIN_SRC bash
go install github.com/jaeyeom/experimental/devtools/gh-nudge/cmd/gh-pr-review@latest
#+END_SRC

** Usage

*** Command Reference

**** Capture Diff

#+BEGIN_SRC bash
gh-pr-review capture <owner>/<repo> <identifier>
#+END_SRC

***** Options:
- `--force`: Overwrite existing diff hunks

***** Examples:
#+BEGIN_SRC bash
# Capture PR diff from GitHub
gh-pr-review capture octocat/Hello-World 42

# Capture branch diff from local git
gh-pr-review capture octocat/Hello-World feature/auth-fix
#+END_SRC

***** Notes:
- **PR numbers**: Pure integers (e.g., 42, 123) are treated as PR numbers
- **Branch names**: Any non-numeric string (e.g., feature/auth, main) is treated as a branch name
- **Branch diffs**: Uses `git diff` to compare branch against its base branch (main/master)

**** Add Line Comment

#+BEGIN_SRC bash
gh-pr-review comment <owner>/<repo> <identifier> <file> <line> "<comment>"
gh-pr-review comment <owner>/<repo> <identifier> <file> <start_line>-<end_line> "<comment>"
#+END_SRC

***** Options:
- `--side`: Side of diff (LEFT, RIGHT) [default: RIGHT]
- `--force`: Add comment even if duplicate detected

***** Examples:
#+BEGIN_SRC bash
# Comment on PR - single line
gh-pr-review comment octocat/Hello-World 42 src/main.js 15 "Consider using const instead of let"

# Comment on PR - line range
gh-pr-review comment octocat/Hello-World 42 src/main.js 15-20 "This function needs refactoring"

# Comment on branch - single line
gh-pr-review comment octocat/Hello-World feature/auth src/auth.js 45 "Add input validation"

# Comment on branch - line range
gh-pr-review comment octocat/Hello-World my-branch src/config.js 10-15 "Extract to constants"
#+END_SRC

**** Submit Review

#+BEGIN_SRC bash
gh-pr-review submit <owner>/<repo> <pr_number>
#+END_SRC

***** Options:
- `--body`: Review body text
- `--event`: Review event (COMMENT, APPROVE, REQUEST_CHANGES) [default: event
  field won't be provided and the review will be pending]

***** Example:
#+BEGIN_SRC bash
gh-pr-review submit octocat/Hello-World 42 --body "Code review completed" --event APPROVE
#+END_SRC

***** Note:
Submit is only available for PRs, not branches. Branch comments are stored locally for later use.

**** List Comments

#+BEGIN_SRC bash
gh-pr-review list <owner>/<repo> <identifier>
#+END_SRC

***** Options:
- `--format`: Output format (table, json) [default: table]
- `--file`: Filter by file path
- `--line`: Filter by specific line number or range (e.g., 15 or 15-20)
- `--side`: Filter by side (LEFT, RIGHT)

***** Examples:
#+BEGIN_SRC bash
# List PR comments
gh-pr-review list octocat/Hello-World 42

# List branch comments
gh-pr-review list octocat/Hello-World feature/auth

# List with filters
gh-pr-review list octocat/Hello-World my-branch --file src/auth.js --format json
#+END_SRC

**** Delete Line Comment

#+BEGIN_SRC bash
gh-pr-review delete <owner>/<repo> <pr_number> <file> <line>
gh-pr-review delete <owner>/<repo> <pr_number> <file> <start_line>-<end_line>
#+END_SRC

***** Options:
- `--side`: Side of diff (LEFT, RIGHT) [default: RIGHT]
- `--confirm`: Skip confirmation prompt
- `--all`: Delete all comments on the specified line (if multiple exist)
- `--index`: Delete comment at specific index (0-based) when multiple exist
- `--json`: Output results in JSON format for programmatic use

***** Behavior:
- **Single line**: If only one comment exists, deletes it; if multiple exist, fails with error listing all comments
- **Line range**: Deletes all comments within the specified line range
- **With `--all`**: Deletes all comments on the specified line/range
- **With `--index N`**: Deletes comment at position N (0-based) when multiple exist on single line

***** Examples:
#+BEGIN_SRC bash
# Delete single comment (fails if multiple exist)
gh-pr-review delete octocat/Hello-World 42 src/main.js 15

# Delete all comments on line
gh-pr-review delete octocat/Hello-World 42 src/main.js 15 --all

# Delete all comments in line range
gh-pr-review delete octocat/Hello-World 42 src/main.js 15-20

# Delete comment at specific index
gh-pr-review delete octocat/Hello-World 42 src/main.js 15 --index 1

# Non-interactive deletion with JSON output
gh-pr-review delete octocat/Hello-World 42 src/main.js 15 --confirm --json
#+END_SRC

**** Clear Comments

#+BEGIN_SRC bash
gh-pr-review clear <owner>/<repo> <pr_number>
#+END_SRC

***** Options:
- `--file`: Clear comments for specific file only
- `--confirm`: Skip confirmation prompt

**** Pull Review Comments

#+BEGIN_SRC bash
gh-pr-review pull <owner>/<repo> <pr_number>
#+END_SRC

***** Options:
- `--force`: Replace all local comments with GitHub comments
- `--author`: Filter by comment author (username or "me" for authenticated user)
- `--format`: Output format (table, json) [default: table]

***** Examples:
#+BEGIN_SRC bash
# Pull all review comments from GitHub
gh-pr-review pull octocat/Hello-World 42

# Pull only your own comments
gh-pr-review pull octocat/Hello-World 42 --author me

# Pull comments from specific author
gh-pr-review pull octocat/Hello-World 42 --author johndoe

# Force replace all local comments with GitHub comments
gh-pr-review pull octocat/Hello-World 42 --force

# Show results in JSON format
gh-pr-review pull octocat/Hello-World 42 --format json
#+END_SRC

*** Workflow Examples

**** Basic Review Workflow

1. **Capture PR diff hunks**:
   #+BEGIN_SRC bash
   gh-pr-review capture myorg/myrepo 123
   #+END_SRC

2. **Add line-specific comments**:
   #+BEGIN_SRC bash
   gh-pr-review comment myorg/myrepo 123 src/auth.js 45 "Add input validation here"
   gh-pr-review comment myorg/myrepo 123 src/auth.js 67 "Consider using async/await"
   #+END_SRC

3. **Review comments before submission**:
   #+BEGIN_SRC bash
   gh-pr-review list myorg/myrepo 123
   #+END_SRC

4. **Delete specific comment if needed**:
   #+BEGIN_SRC bash
   gh-pr-review delete myorg/myrepo 123 src/auth.js 45
   #+END_SRC

5. **Submit as draft review**:
   #+BEGIN_SRC bash
   gh-pr-review submit myorg/myrepo 123 --body "Initial code review"
   #+END_SRC

**** Batch Comment Processing

#+BEGIN_SRC bash
# Process multiple files
for file in src/*.js; do
  gh-pr-review comment myorg/myrepo 123 "$file" 1 "Add copyright header"
done

# Submit all comments at once
gh-pr-review submit myorg/myrepo 123 --body "Batch review: copyright headers"
#+END_SRC

**** Pull and Merge Workflow

#+BEGIN_SRC bash
# Pull existing review comments before starting review
gh-pr-review pull myorg/myrepo 123

# Review what comments already exist
gh-pr-review list myorg/myrepo 123

# Add new comments alongside existing ones
gh-pr-review comment myorg/myrepo 123 src/main.js 25 "Additional feedback"

# Submit combined review (existing + new comments)
gh-pr-review submit myorg/myrepo 123 --body "Updated review with additional feedback"
#+END_SRC

**** Collaborative Review Workflow

#+BEGIN_SRC bash
# Pull comments from specific team member
gh-pr-review pull myorg/myrepo 123 --author teammate1

# Review their feedback
gh-pr-review list myorg/myrepo 123 --author teammate1

# Add follow-up comments
gh-pr-review comment myorg/myrepo 123 src/main.js 30 "Addressing @teammate1's feedback"

# Pull latest comments from all reviewers
gh-pr-review pull myorg/myrepo 123 --force

# Submit final review
gh-pr-review submit myorg/myrepo 123 --body "Final review addressing all feedback"
#+END_SRC

**** AI Agent / Automation Usage

#+BEGIN_SRC bash
# Pull existing comments in JSON format for analysis
gh-pr-review pull myorg/myrepo 123 --format json > pulled_comments.json

# List comments in JSON format for parsing
gh-pr-review list myorg/myrepo 123 --format json > comments.json

# Add comment with automatic confirmation
gh-pr-review comment myorg/myrepo 123 src/main.js 15 "Use const instead of let" --force

# Add comment on line range
gh-pr-review comment myorg/myrepo 123 src/main.js 15-20 "This function needs refactoring" --force

# Delete specific comment non-interactively
gh-pr-review delete myorg/myrepo 123 src/main.js 15 --index 0 --confirm

# Delete all comments in line range
gh-pr-review delete myorg/myrepo 123 src/main.js 15-20 --confirm

# Clear all comments for a file without confirmation
gh-pr-review clear myorg/myrepo 123 --file src/main.js --confirm

# Submit review with JSON output for status tracking
gh-pr-review submit myorg/myrepo 123 --body "Automated review" --event COMMENT --json
#+END_SRC

**** Local Branch Review Workflow

#+BEGIN_SRC bash
# Capture diff for local branch
gh-pr-review capture myorg/myrepo feature/new-api

# Add comments during development
gh-pr-review comment myorg/myrepo feature/new-api src/api.js 25 "TODO: Add error handling"
gh-pr-review comment myorg/myrepo feature/new-api src/api.js 30-35 "Consider extracting to separate function"

# List all comments on the branch
gh-pr-review list myorg/myrepo feature/new-api

# Clear comments after addressing them
gh-pr-review clear myorg/myrepo feature/new-api --confirm

# When ready to create PR, comments can be manually added to the PR review
#+END_SRC

**** Parallel LLM Review Workflow

#+BEGIN_SRC bash
# Multiple LLM instances can review the same branch in parallel
# Each instance captures the diff once
gh-pr-review capture myorg/myrepo feature/complex-feature

# LLM Instance 1: Reviews authentication logic
gh-pr-review comment myorg/myrepo feature/complex-feature src/auth.js 15 "Missing CSRF protection"
gh-pr-review comment myorg/myrepo feature/complex-feature src/auth.js 45 "Password should be hashed"

# LLM Instance 2: Reviews API endpoints (running concurrently)
gh-pr-review comment myorg/myrepo feature/complex-feature src/api.js 20 "Add rate limiting"
gh-pr-review comment myorg/myrepo feature/complex-feature src/api.js 55 "Missing input validation"

# LLM Instance 3: Reviews database queries (running concurrently)
gh-pr-review comment myorg/myrepo feature/complex-feature src/db.js 30 "Potential SQL injection"
gh-pr-review comment myorg/myrepo feature/complex-feature src/db.js 45 "Use parameterized queries"

# Aggregate all comments from all instances
gh-pr-review list myorg/myrepo feature/complex-feature --format json > all_comments.json

# Process and resolve comments one by one
# The file locking ensures atomic operations even with concurrent access
#+END_SRC

** Implementation Details

*** File Locking Strategy

The utility uses the unified storage system's atomic operations with file locking:

- **Shared locks** for read operations (capture, list)
- **Exclusive locks** for write operations (comment, submit, clear)
- **Lock timeout** configurable via `GH_NUDGE_TIMEOUT` [default: 30 seconds]
- **Automatic cleanup** on process termination
- **Lock management** via `gh-storage lock` commands

*** Concurrent Access and Parallel LLM Support

The utility now supports improved concurrent access for parallel LLM instances through configurable retry logic with exponential backoff. This enables multiple AI agents to review code simultaneously without lock contention failures.

**** Configuration

Configure retry behavior using environment variables:

#+BEGIN_SRC bash
# Maximum number of retry attempts (default: 10)
export GH_STORAGE_LOCK_MAX_RETRIES=20

# Initial delay between retries (default: 50ms)
export GH_STORAGE_LOCK_INITIAL_DELAY=100ms

# Maximum delay between retries (default: 2s)
export GH_STORAGE_LOCK_MAX_DELAY=5s

# Backoff factor for exponential delay (default: 1.5)
export GH_STORAGE_LOCK_BACKOFF_FACTOR=1.2
#+END_SRC

**** Parallel LLM Code Review Example

Multiple LLM instances can now review the same PR/branch concurrently:

#+BEGIN_SRC bash
# Instance 1: Reviews authentication code
gh-pr-review comment myorg/repo 123 src/auth.js 15 "Add CSRF protection" &

# Instance 2: Reviews API endpoints (concurrent)
gh-pr-review comment myorg/repo 123 src/api.js 20 "Add rate limiting" &

# Instance 3: Reviews database queries (concurrent)
gh-pr-review comment myorg/repo 123 src/db.js 30 "Use parameterized queries" &

# Wait for all instances to complete
wait
#+END_SRC

**** Batch Processing with Parallelism

Process multiple files in parallel without lock contention:

#+BEGIN_SRC bash
# Parallel processing of multiple files
for file in src/*.js; do
  (
    # Each file processed in parallel
    gh-pr-review comment myorg/repo 123 "$file" 1 "Add copyright header"
  ) &
done

# Wait for all parallel jobs to complete
wait

# Submit all comments at once
gh-pr-review submit myorg/repo 123 --body "Batch review completed"
#+END_SRC

**** Benefits

1. **Better Parallel Support**: Multiple LLM instances can work effectively on the same PR/branch
2. **Configurable Behavior**: Users can tune retry behavior for their specific use cases
3. **Improved Reliability**: Transient lock contention doesn't cause operation failures
4. **Backward Compatibility**: Existing workflows continue to work unchanged

**** Performance Tuning

For high-concurrency scenarios with many parallel agents:

#+BEGIN_SRC bash
# Aggressive retry configuration for heavy parallel usage
export GH_STORAGE_LOCK_MAX_RETRIES=30
export GH_STORAGE_LOCK_INITIAL_DELAY=20ms
export GH_STORAGE_LOCK_MAX_DELAY=1s
export GH_STORAGE_LOCK_BACKOFF_FACTOR=1.3
#+END_SRC

For low-concurrency scenarios with occasional conflicts:

#+BEGIN_SRC bash
# Conservative configuration for light usage
export GH_STORAGE_LOCK_MAX_RETRIES=5
export GH_STORAGE_LOCK_INITIAL_DELAY=100ms
export GH_STORAGE_LOCK_MAX_DELAY=5s
export GH_STORAGE_LOCK_BACKOFF_FACTOR=2.0
#+END_SRC

*** Diff Validation

Comments are validated against captured diff hunks:

1. **File existence**: Verify file exists in diff
2. **Line coverage**: Ensure line falls within diff hunks
3. **Side validation**: Check LEFT/RIGHT side consistency
4. **SHA verification**: Validate against commit SHA

*** Duplicate Detection

The system detects duplicate comments by comparing:

- File path
- Line number
- Comment body (normalized)
- Side (LEFT/RIGHT)

*** Comment Deletion

The delete command removes comments from the local storage:

- **Exact matching**: Deletes comments by file path, line number/range, and side
- **Single line**: If only one comment exists on the line, deletes it directly
- **Line ranges**: Supports GitHub-style line ranges (e.g., 15-20) for multi-line comments
- **Multiple comments**: Without flags, fails with error listing all comments and their indices
- **Index selection**: `--index` flag deletes comment at specific position (0-based)
- **Bulk deletion**: `--all` flag deletes all comments on a line/range at once
- **Non-interactive**: All operations designed to work without user prompts when flags are used
- **Confirmation**: Prompts for confirmation unless `--confirm` is used
- **JSON output**: `--json` flag provides structured output for automation
- **Atomic operation**: Uses exclusive file locking during deletion

*** Error Handling

- **Network failures**: Retry with exponential backoff
- **API rate limits**: Automatic throttling and retry
- **Lock contention**: Graceful waiting with timeout
- **Invalid diff hunks**: Clear validation with helpful error messages

*** GitHub API Integration

Uses `gh api` commands for GitHub operations:

#+BEGIN_SRC bash
# Create review
gh api -X POST /repos/:owner/:repo/pulls/:pr_number/reviews \
  --input review.json

# Get PR diff
gh api /repos/:owner/:repo/pulls/:pr_number/files \
  --jq '.[] | {filename, patch, sha}'

# Pull review comments
gh api /repos/:owner/:repo/pulls/:pr_number/comments \
  --jq '.[] | {path, line, body, side, user: .user.login, created_at, updated_at, id}'

# Pull line-specific review comments
gh api /repos/:owner/:repo/pulls/:pr_number/comments \
  --jq '.[] | select(.line != null) | {path, line, body, side, user: .user.login, created_at, updated_at, id}'
#+END_SRC

*** Pull Comment Processing

The pull command retrieves existing review comments from GitHub:

1. **Comment Retrieval**: Fetches all line-specific review comments from GitHub
2. **Filtering**: Applies author filters before local storage
3. **Deduplication**: Identifies and handles duplicate comments by comparing:
   - File path
   - Line number
   - Comment body (normalized)
   - Comment ID (for exact GitHub matches)
4. **Merge Strategy**:
   - **Default (merge)**: Adds GitHub comments to existing local comments, skipping duplicates
   - **Force**: Replaces all local comments with GitHub comments
5. **Metadata Preservation**: Stores additional GitHub metadata:
   - Comment ID
   - Author information
   - Creation/update timestamps
   - Comment type (line comment vs review comment)
6. **Line Mapping**: Maps GitHub comment positions to local diff hunks
7. **Atomic Operation**: Uses exclusive file locking during pull operations

** Security Considerations

- **File permissions**: Storage directory restricted to user (700)
- **Sensitive data**: No authentication tokens stored locally
- **Input validation**: All user inputs sanitized
- **GitHub API**: Uses official `gh` CLI for authentication

** Troubleshooting

*** Common Issues

**** "Lock timeout exceeded"
Multiple processes accessing the same PR simultaneously. Wait and retry.

**** "Line not in diff hunks"
The specified line is not part of the captured diff. Re-capture the diff or choose a different line.

**** "GitHub API rate limit"
Wait for rate limit reset or use authenticated requests with higher limits.

**** "Invalid diff format"
GitHub API returned unexpected diff format. Clear and re-capture diff hunks.

**** "No comments found on GitHub"
The PR may not have any review comments yet, or the filters (author, state) excluded all comments.

**** "Comment merge conflicts"
When pulling comments, some GitHub comments may conflict with local comments. Use `--force` to overwrite local comments or review and manually resolve conflicts.

*** Debug Mode

Enable debug logging (see main gh-nudge [[file:README.org][README.org]] for configuration details):

#+BEGIN_SRC bash
export GH_NUDGE_DEBUG=true
gh-pr-review capture myorg/myrepo 123
#+END_SRC

*** Logging

Logs are written to `~/.config/gh-nudge/logs/`:

- `gh-pr-review.log`: General application logs
- `github-api.log`: GitHub API interactions
- `lock-operations.log`: File locking operations

*** Storage Management

For detailed storage management operations, see [[file:storage.org][storage.org]].
