---
- import_playbook: "go.yml"

- name: Ensure guru is present
  hosts: all
  tasks:
    - name: Check if guru is installed
      shell: go version -m $(command -v guru) | grep '^\s*mod\s'
      register: guru_installed
      ignore_errors: yes
      changed_when: False

    - name: Extract guru version
      block:
        - name: Set guru facts
          set_fact:
            guru_module_path: "{{ guru_installed.stdout.split()[1] }}"
            guru_module_version: "{{ guru_installed.stdout.split()[2] }}"
        - name: Determine the latest guru version
          command: go list -m -f "{{ '{{' }}.Version {{ '}}' }}" "{{ guru_module_path }}@latest"
          register: guru_latest
          ignore_errors: yes
          changed_when: False

        - name: Debug module path and version
          debug:
            msg: "{{ guru_module_path }} {{ guru_module_version }} => {{ guru_latest.stdout }}"
      rescue:
        - name: Clear guru facts
          set_fact:
            guru_module_path: ""
            guru_module_version: ""

    - name: Upgrade guru
      command: go install golang.org/x/tools/cmd/guru@latest
      when: guru_module_version is not defined or guru_module_version == "" or guru_module_version != guru_latest.stdout
