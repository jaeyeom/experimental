---
- import_playbook: setup-user-go-bin-directory.yml

- name: Ensure goimports is present
  hosts: all
  tasks:
    - name: Include guard for goimports playbook
      block:
        - name: Stop early if the goimports playbook is already included
          meta: end_play
          when: goimports_playbook_imported is defined
        - name: Ensure the goimports playbook is not included
          set_fact:
            goimports_playbook_imported: true
          when: goimports_playbook_imported is not defined

    - name: Check if goimports is installed
      shell: go version -m $(command -v goimports) | grep '^\s*mod\s'
      register: goimports_installed
      ignore_errors: yes
      changed_when: False

    - name: Extract goimports version
      block:
        - name: Set goimports facts
          set_fact:
            goimports_module_path: "{{ goimports_installed.stdout.split()[1] }}"
            goimports_module_version: "{{ goimports_installed.stdout.split()[2] }}"
        - name: Determine the latest goimports version
          command: go list -m -f "{{ '{{' }}.Version {{ '}}' }}" "{{ goimports_module_path }}@latest"
          register: goimports_latest
          ignore_errors: yes
          changed_when: False

        - name: Debug module path and version
          debug:
            msg: "{{ goimports_module_path }} {{ goimports_module_version }} => {{ goimports_latest.stdout }}"
      rescue:
        - name: Clear goimports facts
          set_fact:
            goimports_module_path: ""
            goimports_module_version: ""

    - name: Upgrade goimports
      command: go install golang.org/x/tools/cmd/goimports@latest
      when: goimports_module_version is not defined or goimports_module_version == "" or goimports_module_version != goimports_latest.stdout
