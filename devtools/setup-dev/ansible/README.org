#+TITLE: Ansible Setup Dev

This directory includes Ansible playbooks and a generator of it.

* How to Use

Run the =ensure.sh= script with the proper rule name. Rule names are playbook
filenames.

#+begin_src sh
  ./ensure.sh [rule]...
#+end_src

* Design
The purpose of this Ansible Setup Dev is to set up my development environment
mostly identical in any environment. I made Ansible Playbooks import other
Playbooks to handle dependencies. To prevent multiple inclusion, I added include
guards for each playbook file. Generating it is very cumbersome, so I made a Go
program to generate repetitive text in playbook.

** Platform-Specific Installation Strategy
The generator follows a platform-specific installation strategy to ensure optimal
package management across different environments:

*** Termux
Package manager =pkg= should be strongly preferred on Termux if the package is
available, because Termux has an unconventional setup that usually needs
patching. The =pkg= package manager is also nearly up-to-date and handles
dependencies properly within the Termux environment.

*** Debian/Ubuntu
Debian/Ubuntu's package manager =apt= is often not up-to-date, so it's not
preferred for packages that are actively being developed. Only use =apt= when
old versions are totally acceptable for the use case.

If there's a well-maintained PPA that provides up-to-date packages, it's good to
use it with =apt=. One example is the Emacs PPA (=ppa:ubuntuhandbook1/emacs=)
which provides recent Emacs versions.

*** Python Packages
For Python packages, =uv= is the most preferred installation method. It's
significantly faster than =pip=, has better dependency resolution, and doesn't
suffer from issues like the Python 3.12+ =distutils= removal that affects
system =pip= installations.

*** Go Packages
Go installer (=go install=) is quite cross-platform and handles versioning well,
so it's usually a good idea to use it for Go projects. The generator includes
automatic version checking and upgrade logic for Go packages.

*** macOS
Homebrew is the preferred package manager for macOS, with support for taps and
installation options when needed.

To regenerate the playbooks, simply run:
#+begin_src sh
  go run .
#+end_src

The playbook =all.ynl= just imports variuos other playbooks that I think are
essential.

* Remaining Works
** Learn Ansible Module and Galaxy
I depend on the generator, but if I know more sophisticated features, it would
be much easier.

** Migrate from setup-dev.sh
*** DONE Install searchers
CLOSED: [2024-08-21 Wed 13:41]
*** DONE Locate tool
CLOSED: [2024-08-26 Mon 19:14]
*** DONE gpg
CLOSED: [2025-03-01 Sat 03:29]
*** DONE pass
CLOSED: [2025-03-08 Sat 14:42]
*** TODO Remaining PATH settings
*** DONE Additional spacemacs settings and symbolic links
CLOSED: [2025-03-08 Sat 14:40]

** Migrate from Makefile
*** DONE Pip packages
CLOSED: [2025-03-01 Sat 03:55]
*** TODO Python Development environment
*** DONE Emacs-vterm directory tracking
CLOSED: [2024-08-26 Mon 19:37]

** New Features
*** DONE Include guards for playbooks
*** TODO Spacemacs packages keeping up-to-date
I can run the following command to keep Spacemacs up-to-date.
#+begin_src sh
  emacs --batch -l ~/.config/emacs/init.el --eval='(configuration-layer/update-packages t)'
#+end_src

Here are the caveats:
- I'm not sure if it is okay to run the above command when there is an active
  Emacs session.
- I don't want Emacs to be in a state where it can't run offline. I may need to
  run Emacs one more time to make sure it downloads all the missing or
  to-be-upgraded packages.

*** DONE gh
CLOSED: [2024-08-21 Wed 13:27]
*** DONE Add command-line flags to ensure.sh
CLOSED: [2024-08-26 Mon 19:16]
*** DONE Support MacOS Brew
Added support for Homebrew taps and options in the package generator. The
`PackageData` struct now includes:
- `brewPkgName`: Specify a different package name for Homebrew
- `brewTap`: Specify a tap to install the package from
- `brewOptions`: Specify installation options as string array

Example:
#+begin_src go
  {
  	command: "emacs",
  	brewPkgName: "emacs-plus",
  	brewTap: "d12frosted/emacs-plus",
  	brewOptions: []string{"with-native-comp", "with-modern-icon"},
  }
#+end_src
*** TODO C++ Development environment
*** DONE Docker Setup
CLOSED: [2025-01-06 Mon]
Added Docker installation support with platform-specific implementations:
- macOS: Uses Lima for Docker virtualization (setup-docker-lima.yml)
- Linux: Installs Docker CE from official repositories using modern security practices (setup-docker-ce.yml)
- Termux: Uses udocker with Docker compatibility wrapper (setup-docker-wrapper-udocker.yml)

The docker.yml playbook now uses conditional imports to provide seamless Docker
command availability across all platforms, including Termux where Docker is not
natively supported.
*** TODO Docker Testing
*** DONE Cargo installer
CLOSED: [2025-03-02 Sun 00:03]
Added cargo installation support with platform-specific implementation using the
unified =PlatformSpecificTool= system.
*** DONE emacs-lsp-booster
CLOSED: [2025-03-07 Fri 17:20]
*** Fonts
These are some fonts that I want to ensure that they are installed.
**** TODO Fira Code
**** TODO Sarasa Mono
**** TODO Jetbrains Mono
**** TODO SF Mono
**** TODO D2Coding
**** TODO Noto
*** TODO Aider
*** DONE NPM
CLOSED: [2025-06-22 Sat]
Added NPM package installation support with platform-specific implementation.
*** TODO Nala
*** DONE cargo-update
CLOSED: [2025-03-02 Sun 00:03]
*** TODO yadm

** Remove or simplify playbook generator
*** DONE Unify install method types into platform-specific system
CLOSED: [2025-06-22 Sat]
Unified all install types (GoInstall, PipInstall, CargoInstall, NpmInstall) into
a single =PlatformSpecificTool= system with consistent =InstallMethod=
implementations. Eliminated 4 duplicate templates and conversion logic, reducing
code duplication by 67%.
*** TODO Ansible module to handle package mapping
*** TODO Ansible module to handle go installs instead of generated files

** Bleeding Edge
*** DONE Bleeding Edge Go
*** DONE Bleeding Edge Emacs
CLOSED: [2025-03-01 Sat 03:54]

** Other Issues
*** TODO Fix python3-notmuch2 on Termux

* Manual Playbooks
These files are playbooks not generated from =generate_packages.go=:

- all.yml
- bazel.yml
- cleanup-repo.yml
- e.yml
- gmi.yml
- go.yml
- golangci-lint.yml
- rustc.yml
- setup-bazel.yml
- setup-cargo.yml
- setup-cicd.yml
- setup-claude-privacy.yml
- setup-docker-ce.yml
- setup-docker-lima.yml
- setup-docker-wrapper-udocker.yml
- setup-emacs.yml
- setup-emacs-lsp-booster.yml
- setup-git.yml
- setup-gpg-agent.yml
- setup-gpg-keygen.yml
- setup-history.yml
- setup-kotex.yml
- setup-pass.yml
- setup-perplexity-mcp.yml
- setup-shell-profile.yml
- setup-spacemacs.yml
- setup-spacemacs-go.yml
- setup-ssh-key.yml
- setup-starship.yml
- setup-user-bin-directory.yml
- setup-user-config-directory.yml
- setup-user-go-bin-directory.yml
- setup-vibe-coding.yml
- setup-windsurf-rules.yml
- setup-z.yml
- spacemacs.yml
