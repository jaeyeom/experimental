---
# THIS FILE IS AUTO-GENERATED by generate_packages.go - DO NOT EDIT MANUALLY
# To make changes, modify generate_packages.go, install_methods.go, packages_data.go, or templates.go
# and then run: make
- import_playbook: curl.yml

- name: Ensure nvm is present
  hosts: all
  tasks:
    - name: Include guard for nvm playbook
      block:
        - name: Stop early if the nvm playbook is already included
          meta: end_play
          when: nvm_playbook_imported is defined
        - name: Ensure the nvm playbook is not included
          set_fact:
            nvm_playbook_imported: true
          when: nvm_playbook_imported is not defined

      block:
        - name: Check if nvm is installed
          shell: command -v nvm
          register: nvm_command_check
          failed_when: false
          changed_when: False

        - name: Get installed nvm version
          command: nvm --version
          register: nvm_version_output
          failed_when: false
          changed_when: False
          when: nvm_command_check.rc == 0

        - name: Parse installed nvm version
          set_fact:
            nvm_installed_version: "{{ (nvm_version_output.stdout | regex_search('([0-9.]+)', '\\1')) | default(['0.0.0']) | first }}"
          when: nvm_command_check.rc == 0

        - name: Set default version when nvm is not installed
          set_fact:
            nvm_installed_version: "0.0.0"
          when: nvm_command_check.rc != 0

        - name: Get latest available nvm version from GitHub
          uri:
            url: https://api.github.com/repos/nvm-sh/nvm/releases/latest
            return_content: yes
          register: nvm_latest_release

        - name: Parse latest nvm version from GitHub response
          set_fact:
            nvm_latest_version: "{{ nvm_latest_release.json.tag_name | regex_replace('^v', '') }}"

        - name: Install/update nvm if outdated
          shell: curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/{{ nvm_latest_release.json.tag_name }}/install.sh | bash
          when: nvm_installed_version != nvm_latest_version
