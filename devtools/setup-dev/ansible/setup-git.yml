---
- import_playbook: git.yml
- import_playbook: which.yml
- import_playbook: setup-user-bin-directory.yml

- name: Ensure git is properly set up
  hosts: all
  tasks:
    - name: Include guard for setup-git playbook
      block:
        - name: Stop early if the setup-git playbook is already included
          meta: end_play
          when: setup_git_playbook_imported is defined
        - name: Ensure the setup-git playbook is not included
          set_fact:
            setup_git_playbook_imported: true
          when: setup_git_playbook_imported is not defined

    - name: Determine the user name
      shell: git config --global user.name
      register: get_git_user_name
      ignore_errors: true
      changed_when: False

    - name: Determine the user email
      shell: git config --global user.email
      register: get_git_user_email
      ignore_errors: true
      changed_when: False

    - name: Determine the github username
      shell: git config --global github.user
      register: get_github_username
      ignore_errors: true
      changed_when: False

    - name: Asserts that user name and email are available
      ansible.builtin.assert:
        that: (get_git_user_name.stdout or ansible_env.GIT_AUTHOR_NAME) and
              (get_git_user_email.stdout or ansible_env.GIT_AUTHOR_EMAIL) and
              (get_github_username.stdout or ansible_env.GITHUB_USERNAME)
        fail_msg: "Please set GIT_AUTHOR_NAME, GIT_AUTHOR_EMAIL and/or GITHUB_USERNAME"

    - name: Set global user name
      shell: git config --global user.name "{{ ansible_env.GIT_AUTHOR_NAME }}"
      when: get_git_user_name.stdout == ""

    - name: Set global user email
      shell: git config --global user.email "{{ ansible_env.GIT_AUTHOR_EMAIL }}"
      when: get_git_user_email.stdout == ""

    - name: Set global user name
      shell: git config --global github.user "{{ ansible_env.GITHUB_USERNAME }}"
      when: get_github_username.stdout == ""

    - name: Ensure git user name is set
      ansible.builtin.set_fact:
        git_user_name: "{{ get_git_user_name.stdout | default(ansible_env.GIT_AUTHOR_NAME) }}"

    - name: Ensure git user email is set
      ansible.builtin.set_fact:
        git_user_email: "{{ get_git_user_email.stdout | default(ansible_env.GIT_AUTHOR_EMAIL) }}"

    - name: Ensure git user name is set
      ansible.builtin.set_fact:
        github_username: "{{ get_github_username.stdout | default(ansible_env.GITHUB_USERNAME) }}"

    - name: Debug name
      ansible.builtin.debug:
        msg: "The git user name is {{ git_user_name }}"

    - name: Debug email
      ansible.builtin.debug:
        msg: "The git user email is {{ git_user_email }}"

    - name: Deploy git wrapper script to ~/.local/bin/git
      ansible.builtin.copy:
        dest: "{{ user_bin_directory }}/git"
        mode: '0755'
        content: |
          #!/bin/bash

          if [[ "$1" == "commit" ]]; then
              # Check if --no-verify is passed as a separate argument
              for arg in "$@"; do
                  if [[ "$arg" == "--no-verify" ]]; then
                      echo "Error: The --no-verify flag is not allowed."
                      echo "Please run git commit without --no-verify to ensure hooks are executed."
                      echo "There is an absolte reason for this."
                      exit 1
                  fi
              done
          fi

          # Run the real git command
          REAL_GIT=$(which -a git | grep -v "$(realpath "$0")" | head -n 1)
          exec "$REAL_GIT" "$@"
