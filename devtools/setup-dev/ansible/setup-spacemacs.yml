---
- import_playbook: setup-emacs.yml
- import_playbook: spacemacs.yml
- import_playbook: rg.yml
- import_playbook: pandoc.yml
- import_playbook: pass.yml
- import_playbook: setup-shell-profile.yml
- import_playbook: setup-starship.yml

- name: Ensure spacemacs is properly set up
  hosts: all
  tasks:
    - name: Include guard for setup-spacemacs playbook
      block:
        - name: Stop early if the setup-spacemacs playbook is already included
          meta: end_play
          when: setup_spacemacs_playbook_imported is defined
        - name: Ensure the setup-spacemacs playbook is not included
          set_fact:
            setup_spacemacs_playbook_imported: true
          when: setup_spacemacs_playbook_imported is not defined

    - name: Ensure vterm directory tracking for bash
      ansible.builtin.blockinfile:
        path: "{{ user_profile_path }}"
        append_newline: true
        prepend_newline: true
        create: true
        marker: "# {mark} vterm directory tracking"
        block: |
          if [[ "$INSIDE_EMACS" = "vterm" ]] \
                 && [[ -n ${EMACS_VTERM_PATH} ]] \
                 && [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]; then
              # First load the original vterm shell script
              source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh

              # Save the original vterm_prompt_end function
              vterm_old_prompt_end=$(declare -f vterm_prompt_end)

              # Define a function to send directory tracking info to Emacs
              function vterm_emacs_directory_tracking() {
                  # Send the directory tracking escape sequence
                  vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
              }

              # Add our function to the end of PROMPT_COMMAND
              # This ensures it runs after starship has set up the prompt
              PROMPT_COMMAND="${PROMPT_COMMAND};vterm_emacs_directory_tracking"
          fi
      when: user_shell.stdout is search('/bash$')

    - name: Ensure vterm directory tracking for zsh
      ansible.builtin.blockinfile:
        path: "{{ user_profile_path }}"
        append_newline: true
        prepend_newline: true
        create: true
        marker: "# {mark} vterm directory tracking"
        block: |
          if [[ "$INSIDE_EMACS" = "vterm" ]] \
                 && [[ -n ${EMACS_VTERM_PATH} ]] \
                 && [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-zsh.sh ]]; then
              # First load the original vterm shell script
              source ${EMACS_VTERM_PATH}/etc/emacs-vterm-zsh.sh

              # Override the vterm_prompt_end function to ensure it's called after starship
              # has initialized the prompt
              vterm_old_prompt_end=$functions[vterm_prompt_end]

              # Define a new function that will be added to the precmd hooks
              # This will run after starship has set up the prompt
              function vterm_emacs_directory_tracking() {
                  # Send the directory tracking escape sequence
                  vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
              }

              # Add our function to the precmd hooks - it will run on each prompt
              autoload -U add-zsh-hook
              add-zsh-hook precmd vterm_emacs_directory_tracking
          fi
      when: user_shell.stdout is search('/zsh$')

    - name: Ensure .spacemacs-upstream symlink
      ansible.builtin.file:
        src: "{{ ansible_env.HOME }}/go/src/github.com/jaeyeom/experimental/spacemacs/.spacemacs"
        dest: "{{ ansible_env.HOME }}/.spacemacs-upstream"
        state: link
        force: yes
