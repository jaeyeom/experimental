---
- import_playbook: "go.yml"

- name: Ensure protoc-gen-go-grpc is present
  hosts: all
  tasks:
    - name: Check if protoc-gen-go-grpc is installed
      shell: go version -m $(command -v protoc-gen-go-grpc) | grep '^\s*mod\s'
      register: protoc_gen_go_grpc_installed
      ignore_errors: yes
      changed_when: False

    - name: Extract protoc-gen-go-grpc version
      block:
        - name: Set protoc-gen-go-grpc facts
          set_fact:
            protoc_gen_go_grpc_module_path: "{{ protoc_gen_go_grpc_installed.stdout.split()[1] }}"
            protoc_gen_go_grpc_module_version: "{{ protoc_gen_go_grpc_installed.stdout.split()[2] }}"
        - name: Determine the latest protoc-gen-go-grpc version
          command: go list -m -f "{{ '{{' }}.Version {{ '}}' }}" "{{ protoc_gen_go_grpc_module_path }}@latest"
          register: protoc_gen_go_grpc_latest
          ignore_errors: yes
          changed_when: False

        - name: Debug module path and version
          debug:
            msg: "{{ protoc_gen_go_grpc_module_path }} {{ protoc_gen_go_grpc_module_version }} => {{ protoc_gen_go_grpc_latest.stdout }}"
      rescue:
        - name: Clear protoc-gen-go-grpc facts
          set_fact:
            protoc_gen_go_grpc_module_path: ""
            protoc_gen_go_grpc_module_version: ""

    - name: Upgrade protoc-gen-go-grpc
      command: go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
      when: protoc_gen_go_grpc_module_version is not defined or protoc_gen_go_grpc_module_version == "" or protoc_gen_go_grpc_module_version != protoc_gen_go_grpc_latest.stdout
