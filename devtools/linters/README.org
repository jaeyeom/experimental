#+TITLE: Org Linters
#+DATE: 2025-06-20

* Overview

This directory contains linting tools for various file formats, starting with org-lint for Org-mode files.

* Tools

** org-lint

A Go wrapper around Emacs org-lint functionality that provides command-line linting for Org-mode files.

*** Features

- Lints one or more .org files using Emacs org-lint
- Returns appropriate exit codes (0 for clean, 1 for issues)
- Formats output as filename:line: (trust-level) description
- Automatically loads user's Emacs packages from elpa directory
- Loads all available ob-* packages for org-babel source block support
- Auto-discovers and loads all *-mode packages for comprehensive language support
- Gracefully handles package loading errors
- Supports both traditional (~/.emacs.d) and modern (~/.config/emacs) configurations
- Only loads packages for the current Emacs version
- Suitable for CI/CD pipelines and pre-commit hooks

*** Installation

**** Direct Installation from GitHub (Recommended)

#+BEGIN_SRC bash
# Install the latest version from GitHub
go install github.com/jaeyeom/experimental/devtools/linters/cmd/org-lint@latest

# Verify installation
org-lint README.org
#+END_SRC

**** From Source

#+BEGIN_SRC bash
# Clone the repository
git clone https://github.com/jaeyeom/experimental.git
cd experimental/devtools/linters

# Install the tool (requires Go 1.16+)
go install ./cmd/org-lint

# Verify installation
org-lint --help
#+END_SRC

**** From Repository Root

#+BEGIN_SRC bash
# Install directly with full path
go install ./devtools/linters/cmd/org-lint
#+END_SRC

*** Prerequisites

- Go 1.16 or later
- Emacs with org-mode
- ~$GOPATH/bin~ or ~$GOBIN~ in your PATH

*** Usage

#+BEGIN_SRC bash
# Lint a single file
org-lint README.org

# Lint multiple files
org-lint file1.org file2.org file3.org

# Use in scripts (check exit code)
if org-lint *.org; then
    echo "All files are clean"
else
    echo "Issues found"
fi

# Enable debug output to see load-path
DEBUG=1 org-lint README.org
#+END_SRC

*** Output Format

#+BEGIN_SRC text
README.org:15: (low) Missing space after comma
README.org:42: (nil) Link should have a description
README.org:89: (high) Invalid property syntax
#+END_SRC

*** Integration Examples

**** Pre-commit Hook

#+BEGIN_SRC bash
#!/bin/sh
# .git/hooks/pre-commit
ORG_FILES=$(git diff --cached --name-only --diff-filter=ACM -z | grep -z '\.org$')

if [ -n "$ORG_FILES" ]; then
    echo "Running org-mode checks on .org files..."
    echo -n "$ORG_FILES" | xargs -0 -r org-lint
fi
#+END_SRC

**** GitHub Actions

#+BEGIN_SRC yaml
- name: Lint Org files
  run: |
    go install github.com/jaeyeom/experimental/devtools/linters/cmd/org-lint@latest
    org-lint $(find . -name "*.org")
#+END_SRC

*** How It Works

The tool uses Emacs in batch mode with the following approach:

1. Detects user's Emacs configuration directory using ~user-emacs-directory~
2. Adds package directories to load-path for the current Emacs version only
3. Loads all available ~ob-*~ packages for org-babel source block support
4. Auto-discovers and loads all ~*-mode~ packages for comprehensive language support
5. Runs org-lint on each specified file
6. Returns exit code 1 if any issues are found, 0 if all files are clean

This ensures that the linter has access to all your installed Emacs packages and can properly validate org-babel source blocks and other org-mode features.

*** Known Issues

**** Performance

The linter can be slow when processing multiple files because Emacs needs to start up and load all packages for each file. For better performance when linting many files:

- Consider using a wrapper script that collects all files and passes them in a single invocation
- The startup overhead is amortized when processing multiple files in one command
- On a typical system, expect ~1-3 seconds per file due to Emacs startup and package loading

**** Package Loading

Some ob-* or *-mode packages may fail to load due to missing dependencies or configuration issues. The tool gracefully handles these failures and continues linting, but you may miss validation for specific source block languages if their corresponding packages fail to load.

*** Building from Source

**** Using Go

#+BEGIN_SRC bash
# Build binary in current directory
go build ./cmd/org-lint

# Or build and install to GOPATH/bin
go install ./cmd/org-lint
#+END_SRC

**** Using Bazel

#+BEGIN_SRC bash
bazel build //devtools/linters/cmd/org-lint:org-lint
#+END_SRC
