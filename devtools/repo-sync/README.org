#+TITLE: Repo-Sync: Multi-Machine Development File Synchronization

* Overview

Repo-Sync is a specialized utility for synchronizing project-specific files
across multiple development machines using Git-based workflow automation. It
addresses the unique challenge of keeping development configurations and project
files in sync without uploading entire repositories to remote storage.

The utility is implemented in Go for cross-platform compatibility, performance,
and robust concurrent operations while leveraging external tools like rsync and
Git for specialized functionality.

** Key Features

- **Selective Synchronization**: Uses rsync patterns to sync only relevant files
- **Git Integration**: Automated commit-pull-push workflows with conflict resolution
- **Multi-Machine Coordination**: Deletion tracking and conflict resolution across machines
- **SQLite Database**: Metadata tracking, performance metrics, and operation history
- **Robust Error Handling**: Comprehensive error detection and recovery procedures

** Installation

*** From Source (Bazel)

This project is part of a Bazel monorepo. To build and run:

#+BEGIN_SRC bash
# Build with Bazel
bazel build //devtools/repo-sync/cmd/repo-sync:repo-sync

# Run directly
bazel run //devtools/repo-sync/cmd/repo-sync:repo-sync

# Or use the Makefile shortcuts
cd devtools/repo-sync
make build
make install  # Copies binary to bin/repo-sync
#+END_SRC

** Quick Start

*** 1. Initialize Repo-Sync

#+BEGIN_SRC bash
# Initialize configuration and database
repo-sync init
#+END_SRC

This creates the configuration directory at =~/.config/repo-sync/= with:
- =config.yaml= - Global configuration
- =mappings/= - Project-specific mapping files
- =metadata.db= - SQLite database for tracking operations
- =logs/=, =backups/=, =rollbacks/=, =locks/= - Working directories

*** 2. Add a Project

#+BEGIN_SRC bash
# Add a new project mapping
repo-sync config add-project myproject \
  --local-dir /path/to/local/project \
  --remote-repo git@github.com:user/sync-repo.git \
  --remote-prefix projects/myproject \
  --include "*.yaml" --include "*.json" \
  --exclude "*.tmp" --exclude "*.log"
#+END_SRC

*** 3. Synchronize Files

#+BEGIN_SRC bash
# Perform bidirectional sync
repo-sync sync myproject

# Download only (remote takes precedence)
repo-sync download myproject

# Upload only (local takes precedence)
repo-sync upload myproject

# Dry run to see what would be synced
repo-sync sync myproject --dry-run
#+END_SRC

* Architecture

** Commands

*** Core Operations

- =repo-sync init= - Initialize configuration and database
- =repo-sync sync <project>= - Bidirectional synchronization
- =repo-sync add <project> <file>= - Add file to sync scope
- =repo-sync remove <project> <file>= - Remove file from sync scope

*** Management

- =repo-sync config add-project <name>= - Add project configuration
- =repo-sync config remove-project <name>= - Remove project configuration
- =repo-sync config list-projects= - List all projects
- =repo-sync config show-project <name>= - Show project details

*** Status and Verification

- =repo-sync status [project]= - Show sync status
- =repo-sync verify <project>= - Verify configuration and connectivity

** Configuration

*** Global Configuration (=~/.config/repo-sync/config.yaml=)

#+BEGIN_SRC yaml
# Default sync patterns (can be overridden per project)
default_sync_patterns:
  include:
    - "*.yaml"
    - "*.yml"
    - "*.json"
    - "*.toml"
    - "*.ini"
    - "*.conf"
    - "*.config"
    - "*.md"
    - "*.txt"
    - "*.org"
  exclude:
    - "*.tmp"
    - "*.log"
    - "*.cache"
    - ".git/**/*"
    - "node_modules/**/*"
    - "__pycache__/**/*"

# Conflict resolution preferences
conflict_resolution:
  default_strategy: "timestamp_newest"
  backup_conflicts: true

# Performance settings
performance:
  rsync_compression_level: 6
  max_concurrent_operations: 3
  timeout_seconds: 300

# Logging settings
logging:
  level: "info"
  file_retention_days: 30
  max_file_size_mb: 10
#+END_SRC

*** Project Configuration (=~/.config/repo-sync/mappings/<project>.yaml=)

#+BEGIN_SRC yaml
project_name: "myproject"
local_work_dir: "/home/user/projects/myproject"
remote_repo: "git@github.com:user/dotfiles-sync.git"
remote_work_dir: "/home/user/.repo-sync/remotes/dotfiles-sync"
remote_path_prefix: "projects/myproject"
sync_patterns:
  include:
    - "*.yaml"
    - "*.json"
    - "config/**/*"
  exclude:
    - "*.tmp"
    - "*.log"
    - ".git/**/*"
#+END_SRC

** Architecture

*** Core Components

1. **Configuration Management** - YAML-based project configurations and user settings
2. **Database Layer** - SQLite for metadata and operation tracking
3. **Synchronization Engine** - Rsync integration for efficient file transfer
4. **Git Workflow Manager** - Automated commit, pull, and push operations
5. **Conflict Resolution System** - Multiple resolution strategies with backup capability

*** Workflow

1. **Pre-sync validation** - Ensures remote repository is accessible
2. **Initial rsync** - Syncs files from local to remote work directory using selective patterns
3. **Git operations** - Commits, pulls with rebase, resolves conflicts, and pushes
4. **Post-sync rsync** - Syncs any changes back to local work directory

** Configuration Structure

The utility maintains configuration in the user's home directory:

#+BEGIN_SRC
~/.config/repo-sync/
├── config.yaml           # Main configuration file
├── mappings/             # Project-specific mapping files
│   ├── project1.yaml
│   └── project2.yaml
├── metadata.db          # SQLite database for tracking operations
└── logs/                # Operation logs
    ├── sync.log
    └── errors.log
#+END_SRC

** Development

*** Building

#+BEGIN_SRC bash
# Build binary with Bazel
make build
# or: bazel build //devtools/repo-sync/cmd/repo-sync:repo-sync

# Run tests with Bazel
make test
# or: bazel test //devtools/repo-sync/...

# Format code (from repo root)
make format

# Run the application
make run
# or: bazel run //devtools/repo-sync/cmd/repo-sync:repo-sync
#+END_SRC

*** Project Structure

#+BEGIN_SRC
devtools/repo-sync/
├── cmd/repo-sync/           # Main application entry point
├── internal/
│   ├── cli/                 # CLI command implementations
│   ├── config/              # Configuration management
│   ├── database/            # SQLite operations
│   ├── git/                 # Git workflow manager
│   └── sync/                # Synchronization engine
├── Makefile                 # Build automation
├── go.mod                   # Go module file
└── README.org               # This file
#+END_SRC

** Dependencies

- **Go 1.21+** - Programming language
- **rsync** - File synchronization tool
- **git** - Version control system
- **sqlite3** - Database engine

*** Go Dependencies

- =github.com/spf13/cobra= - CLI framework
- =github.com/spf13/viper= - Configuration management
- =github.com/mattn/go-sqlite3= - SQLite driver
- =github.com/sirupsen/logrus= - Structured logging
- =gopkg.in/yaml.v3= - YAML parsing

** Troubleshooting

*** Common Issues

1. **SSH Authentication Failed**
   #+BEGIN_SRC bash
   # Generate SSH key
   ssh-keygen -t ed25519 -C "your_email@example.com"

   # Add to SSH agent
   ssh-add ~/.ssh/id_ed25519

   # Add public key to remote Git service
   #+END_SRC

2. **Rsync Not Found**
   #+BEGIN_SRC bash
   # Install rsync
   sudo apt install rsync  # Ubuntu/Debian
   brew install rsync      # macOS
   #+END_SRC

3. **Database Locked**
   #+BEGIN_SRC bash
   # Check for running processes
   lsof ~/.config/repo-sync/metadata.db

   # Reset database if necessary
   repo-sync init --reset-db
   #+END_SRC

*** Debug Mode

#+BEGIN_SRC bash
# Enable verbose logging
repo-sync --verbose sync myproject

# Enable debug tracing
repo-sync --debug sync myproject
#+END_SRC

* Usage Examples

** Initial Setup

#+BEGIN_SRC bash
# Initialize repo-sync configuration
repo-sync init

# Add a new project mapping
repo-sync config add-project myproject \
  --local-dir /home/user/projects/myproject \
  --remote-repo git@github.com:user/sync-repo.git \
  --remote-prefix projects/myproject
#+END_SRC

** Daily Workflow

#+BEGIN_SRC bash
# Morning sync - download changes from other machines
repo-sync sync myproject

# Work on files...

# Evening sync - upload changes to remote
repo-sync sync myproject

# Add new configuration file
repo-sync add myproject ./config/new-feature.yaml

# Remove obsolete file
repo-sync remove myproject ./config/deprecated.yaml
#+END_SRC

** Multi-Machine Coordination

#+BEGIN_SRC bash
# On Machine A
repo-sync sync myproject
# Edit files...
repo-sync sync myproject

# On Machine B
repo-sync sync myproject  # Automatically pulls changes from Machine A
# Edit different files...
repo-sync sync myproject  # Pushes changes back
#+END_SRC

* Advanced Features

** Core Operations Details

*** 1. Sync Operation
The sync operation performs bidirectional synchronization:
1. *Pre-sync validation*: Ensures remote repository is accessible
2. *Initial rsync*: Syncs files from local to remote work directory using selective patterns
3. *Git operations*: Commits, pulls with rebase, resolves conflicts, and pushes
4. *Post-sync rsync*: Syncs any changes back to local work directory

*** 2. Add Operation
Adds new files to the synchronization scope:
1. *Precondition check*: Verifies file doesn't exist in remote repository
2. *Sync execution*: Runs full sync operation first
3. *File mirroring*: Copies local file to appropriate remote work directory path
4. *Git commit and push*: Commits the new file and pushes to remote

*** 3. Remove Operation
Removes files from both local and remote repositories with deletion tracking:
1. *Deletion execution*: Removes file from both local and remote work directories
2. *Metadata tracking*: Records deletion timestamp and commit hash in SQLite database
3. *Git operations*: Commits deletion and pushes to remote repository

** Deletion Synchronization

The utility maintains a deletion tracking system to coordinate file removals
across multiple machines. The system analyzes Git log for deleted files and
compares local file content with deletion records.

** Conflict Resolution

Automated conflict resolution uses multiple strategies including
timestamp-based, content-based, and manual intervention approaches. The system
creates backup copies before overwriting conflicted files.

** Git Integration

Deep integration with Git workflows including commit message automation, branch
management, hook integration, and sparse checkout support.

* Comparison with Existing Solutions

** Advantages over Syncthing
- *Selective sync*: Only syncs files that should be shared
- *Git integration*: Version control and conflict resolution
- *Project-specific*: Handles multiple projects with different sync requirements
- *Deletion tracking*: Proper handling of file deletions across machines

** Advantages over Git Sparse-Checkout
- *Multi-repository support*: Works across different project repositories
- *Automated workflow*: Reduces manual Git operations
- *Conflict resolution*: Automated handling of merge conflicts
- *Flexible mapping*: Maps local directories to arbitrary remote paths

** Advantages over Dotfile Managers
- *Project-specific*: Not limited to dotfiles and configurations
- *Multi-machine state*: Tracks synchronization state across machines
- *Selective inclusion*: Doesn't require entire repository checkout
- *Development workflow*: Designed for active development scenarios

* Future Enhancements

** Planned Features
- *Watch mode*: Automatic sync on file changes
- *Conflict visualization*: GUI for resolving complex conflicts
- *Bandwidth optimization*: Compression and delta sync improvements
- *Plugin system*: Extensible architecture for custom workflows
- *Integration hooks*: Pre/post sync script execution

** Advanced Workflows
- *Branch-aware sync*: Different sync behavior per Git branch
- *Staged sync*: Selective synchronization of staged changes
- *Rollback support*: Easy rollback to previous sync states
- *Sync analytics*: Statistics and monitoring of sync operations

* Quick Troubleshooting

** Common Commands
#+BEGIN_SRC bash
# Check sync status
repo-sync status myproject

# Verify repository state
repo-sync verify myproject

# Show recent sync operations
repo-sync log myproject --limit 10

# Test connectivity
repo-sync test myproject
#+END_SRC

* Contributing

This utility fills a specific gap in the development workflow ecosystem by
combining selective file synchronization, Git automation, and multi-machine
coordination in a way that existing tools don't adequately address.

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests if applicable
5. Run =make format= and =make test=
6. Submit a pull request

** Implementation Details

The utility is implemented in **Go** for cross-platform compatibility, strong concurrency support, excellent performance, robust error handling, and easy deployment as a single binary. The implementation leverages Go's standard library along with carefully selected third-party packages while maintaining external dependencies on rsync and Git for their specialized functionality.

** License

This project is part of the experimental repository and follows the same licensing terms.
