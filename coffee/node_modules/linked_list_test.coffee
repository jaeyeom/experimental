# Author: Jaehyun Yeom
#
# Description:
#   Unittest for linked_list module.

linked_list = require 'linked_list'
unittest = require 'unittest'

LinkedList = linked_list.LinkedList


class LinkedListTest extends unittest.TestCase
  setUp: ->
    @list = null

  testEmptyList: ->
    @assertFalse @list?

  testAppendSingle: ->
    @list = linked_list.append @list, 100
    expected = new LinkedList(100, null)
    @assertTrue linked_list.isEqual expected, @list

  testLength: ->
    @assertEqual 0, linked_list.length @list

  testMap: ->
    @assertEqual null, linked_list.map @list, (x) -> 2 * x

  testReduce: ->
    @assertEqual undefined, linked_list.reduce @list, (x, y) -> 2 * x
    @list = linked_list.append @list, 100
    @assertEqual 100, linked_list.reduce @list, (x, y) -> 2 * x


class LinkedListWithThreeElementsTest extends unittest.TestCase
  setUp: ->
    @list = null
    @list = linked_list.append @list, 100
    @list = linked_list.append @list, 50
    @list = linked_list.append @list, 75

  testNonemptyList: ->
    @assertTrue @list?

  testToArray: ->
    array = linked_list.toArray @list
    @assertArrayEqual [100, 50, 75], array

  testNth: ->
    nth = linked_list.nth
    @assertEqual 100, nth @list, 0
    @assertEqual 50, nth @list, 1
    @assertEqual 75, nth @list, 2
    @assertEqual undefined, nth @list, 3
    @assertEqual undefined, nth @list, -1

  testReverse: ->
    reversed = linked_list.reverse @list
    nth = linked_list.nth
    @assertEqual 75, nth reversed, 0
    @assertEqual 50, nth reversed, 1
    @assertEqual 100, nth reversed, 2
    @assertEqual undefined, nth reversed, 3

  testLength: ->
    @assertEqual 3, linked_list.length @list

  testMap: ->
    mapped = linked_list.map @list, (x) -> x * 2
    nth = linked_list.nth
    @assertEqual 200, nth mapped, 0
    @assertEqual 100, nth mapped, 1
    @assertEqual 150, nth mapped, 2
    @assertEqual undefined, nth mapped, 3

  testReduce: ->
    reduced = linked_list.reduce @list, (x, y) -> x - y
    @assertEqual -25, reduced

  testInsertionSort: ->
    sorted = linked_list.insertionSort @list
    nth = linked_list.nth
    @assertEqual 50, nth sorted, 0
    @assertEqual 75, nth sorted, 1
    @assertEqual 100, nth sorted, 2
    @assertEqual undefined, nth sorted, 3


(new LinkedListTest 'LinkedListTest').run()
(new LinkedListWithThreeElementsTest 'LinkedListWithThreeElementsTest').run()
