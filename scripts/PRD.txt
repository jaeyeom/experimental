<context>
# Overview
DevCheck is an AI-friendly development automation tool designed to streamline code quality checks across multi-language codebases. It solves the problem of inconsistent application of formatting, linting, and testing standards by providing a unified interface that automatically detects project types and runs appropriate tools. The tool is targeted at developers working with AI assistants (like Claude, GitHub Copilot) who need structured, actionable output to maintain code quality. It's valuable because it reduces manual overhead, ensures consistency, and provides AI-optimized output that enables better automation workflows.

# Core Features
## Automatic Project Detection
- **What it does**: Analyzes repository structure to identify programming languages, build systems, and configuration files
- **Why it's important**: Eliminates manual configuration and ensures the right tools are run for each project type
- **How it works**: Scans for language-specific files (go.mod, package.json, pyproject.toml) and build system markers (Makefile, BUILD.bazel)

## Multi-Tool Execution Framework
- **What it does**: Runs appropriate formatters, linters, and test suites based on detected project types
- **Why it's important**: Provides comprehensive quality checks without requiring developers to remember different commands
- **How it works**: Executes external tools (gofumpt, golangci-lint, ruff, npm) with proper configuration and error handling

## AI-Optimized Output
- **What it does**: Generates structured, actionable output in both human-readable and machine-parseable formats
- **Why it's important**: Enables AI assistants to understand and act on quality issues automatically
- **How it works**: Formats tool output into consistent structures with clear problem descriptions and fix suggestions

## Incremental Processing
- **What it does**: Optionally processes only changed files using git integration
- **Why it's important**: Dramatically improves performance on large codebases
- **How it works**: Uses git diff to identify modified files and runs tools only on relevant subsets

# User Experience
## User Personas
- **AI-Assisted Developer**: Uses Claude/Copilot for development, needs structured tool output
- **Team Lead**: Wants consistent code quality across team members and projects
- **CI/CD Engineer**: Needs reliable quality gates for automated pipelines

## Key User Flows
1. **Basic Quality Check**: Developer runs `devcheck` in project root, gets comprehensive report
2. **Make Integration**: Developer uses existing `make devcheck` target for familiar workflow
3. **CI Integration**: Pipeline runs devcheck and fails on quality issues
4. **AI Workflow**: Developer asks AI to "fix all devcheck issues", AI parses JSON output and makes corrections

## UI/UX Considerations
- Zero-configuration design with sensible defaults
- Clear, actionable error messages with fix suggestions
- Progress indicators for long-running operations
- Graceful degradation when tools are missing
- Consistent output format across different project types
</context>
<PRD>
# Technical Architecture
DevCheck will be implemented as a Go command-line tool with the following system components:

## Core Components
- **Project Detector**: Analyzes repository structure to identify build systems and languages
- **Tool Executor**: Manages execution of formatters, linters, and test runners
- **Output Formatter**: Generates human-readable and JSON output formats
- **Configuration Manager**: Handles settings and tool discovery

## Data Models
- **ProjectConfig**: Repository metadata and detected tools
- **ExecutionResult**: Command output, exit codes, and error details
- **Issue**: Structured representation of linting/formatting problems

## APIs and Integrations
- Git integration for changed-file detection
- External tool execution (gofumpt, golangci-lint, ruff, npm)
- Configuration file parsing (go.mod, package.json, pyproject.toml)
- Build system integration (Bazel, Make)

## Infrastructure Requirements
- Cross-platform compatibility (Linux, macOS, Windows)
- Minimal dependencies (Go standard library + external tools)
- Graceful handling of missing tools
- Process management for parallel execution

# Development Roadmap

## MVP Requirements (Phase 1)
- Basic project detection (Go, Python, TypeScript)
- Simple tool execution framework
- Text-based output format
- Support for Makefile integration
- Error handling for missing tools

## Enhanced Features (Phase 2)
- JSON output format for programmatic consumption
- Bazel integration support
- Configuration file support (.ai-dev-assistant.yaml)
- Performance optimizations (parallel execution)
- Changed-files-only mode using git

## Advanced Capabilities (Phase 3)
- AI-optimized output recommendations
- Custom rule definition support
- Integration with CI/CD systems
- Additional language support (Rust, Java, C++)
- IDE extension compatibility

## Polish and Production (Phase 4)
- Comprehensive error handling and user experience
- Performance benchmarking and optimization
- Documentation and examples
- Package distribution and installation methods
- Community feedback integration

# Logical Dependency Chain

## Foundation Layer (Build First)
1. **Project Detection System**: Core capability to identify repository types
2. **Basic Tool Execution**: Framework for running external commands
3. **Simple Output Format**: Initial text-based reporting

## Usable Frontend (Quick Win)
4. **Makefile Integration**: Leverage existing build systems immediately
5. **Go Tool Support**: Start with most common language in codebase
6. **Error Handling**: Graceful degradation for missing dependencies

## Expandable Features (Build Upon)
7. **Multi-language Support**: Add Python and TypeScript detection
8. **JSON Output**: Enable programmatic consumption
9. **Bazel Integration**: Support advanced build systems

## Advanced Capabilities (Iterate and Improve)
10. **Changed-file Detection**: Performance optimization for large repos
11. **Parallel Execution**: Speed improvements for multiple tools
12. **AI-optimized Output**: Enhanced recommendations for LLM consumption

# Risks and Mitigations

## Technical Challenges
- **Tool Compatibility**: Different versions of external tools may behave inconsistently
  - Mitigation: Test with multiple tool versions and provide clear compatibility documentation
- **Performance**: Large repositories may take too long to process
  - Mitigation: Implement timeout mechanisms and parallel execution with progress indicators
- **Cross-platform Support**: Tool paths and execution differ across operating systems
  - Mitigation: Use Go's standard library for cross-platform compatibility and tool discovery

## MVP Scope Definition
- **Feature Creep**: Risk of over-engineering initial version
  - Mitigation: Focus on Makefile integration first, then expand incrementally
- **Configuration Complexity**: Too many options may confuse users
  - Mitigation: Zero-configuration approach with sensible defaults
- **Output Format**: Balancing human-readable and machine-parseable output
  - Mitigation: Start with simple text format, add JSON as secondary option

## Resource Constraints
- **External Tool Dependencies**: Users may not have required tools installed
  - Mitigation: Graceful degradation with clear installation instructions
- **Maintenance Overhead**: Keeping up with changes in external tools
  - Mitigation: Modular architecture allowing easy updates to tool integrations
- **Testing Complexity**: Multiple combinations of tools and environments
  - Mitigation: Automated testing with common tool configurations

# Appendix

## Research Findings
Current pain points identified in the existing codebase:
- Extensive rule documentation in `docs/windsurf/rules` requires manual maintenance
- Inconsistent application of formatting and linting across different project areas
- Manual intervention required to run appropriate tools for different contexts
- AI agents need structured, actionable output to effectively assist developers

## Technical Specifications
- **Go Version**: 1.21+ for implementation
- **External Dependencies**: gofumpt, golangci-lint, ruff, npm (optional)
- **Configuration Format**: YAML for .ai-dev-assistant.yaml
- **Output Formats**: Human-readable text (default), JSON (optional)
- **Exit Codes**: Standard Unix conventions (0 = success, 1 = errors found, 2 = execution failure)

## Integration Examples
- **Make Integration**: `make devcheck` as standard target
- **CI/CD**: GitHub Actions workflow using devcheck for quality gates
- **Git Hooks**: Pre-commit integration for automated quality checks
- **IDE Extensions**: VS Code extension for real-time feedback
</PRD>