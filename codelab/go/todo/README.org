* Todo application

This is a simple to-do application developed using test-driven development and
Copilot. The following milestones were determined ad hoc, so the second
milestone was unknown when the first milestone was being developed.

** Project Structure

The project is organized into several packages:

*** core
Contains the core data structures and business logic for todo items and lists.
Provides functionality for adding, completing, and removing items.

*** config
Handles storage configuration through command-line flags and environment variables.
Supports both JSON and SQLite storage backends.

*** storage/json
Implements JSON file-based storage for todo lists. Uses file system operations
with proper locking mechanisms to ensure thread safety.

*** storage/sqlite
Implements SQLite-based storage for todo lists. Uses SQLite database with proper
locking mechanisms to ensure thread safety and transaction support.

*** main
Contains the command-line interface and defines the storage interface. The
interface is defined here as this is where different storage implementations
are used together.

** Usage

The application provides the following commands:

#+begin_src
todo ls                     List todo items
todo add "item"             Add a new todo item
todo addsubtask <id> "item" Add a subtask to an existing item
todo complete <id>          Complete a todo item
todo uncomplete <id>        Mark a completed item as incomplete
todo undo <id>              Undo a completed item
todo remove <id>            Remove a todo item
todo moveup <id>            Move a todo item up among its siblings
todo movedown <id>          Move a todo item down among its siblings
#+end_src

Tasks can have subtasks, which are displayed with indentation. The state of a
task is shown as:
- [ ] Not started
- [x] Completed
- [-] Partially done (when some but not all subtasks are completed)

When completing a parent task, all its subtasks will also be completed. When
undoing a task, it and all its subtasks will be marked as not started.

Tasks and subtasks can be reordered within their sibling group using the moveup
and movedown commands. This allows you to organize tasks in your preferred order.
For example:

#+begin_src
# Move a task up among its siblings
todo moveup 123

# Move a task down among its siblings
todo movedown abc
#+end_src

The ID can be a prefix as long as it uniquely identifies a task. If multiple
tasks match the prefix, you'll get an "ambiguous item ID" error.

*** Storage Configuration

The storage backend can be configured using either command-line flags or
environment variables:

**** Command-line Flags
- ~--storage-type~: Type of storage backend (json or sqlite)
- ~--storage-path~: Path to the storage file

**** Environment Variables
- ~TODO_STORAGE_TYPE~: Type of storage backend
- ~TODO_STORAGE_PATH~: Path to the storage file

Command-line flags take precedence over environment variables. If neither is
specified, the application defaults to JSON storage at ~/.todo/todos.json.

Examples:
#+begin_src bash
# Use JSON storage with custom path
todo --storage-type json --storage-path /path/to/todos.json ls

# Use SQLite storage with custom path
todo --storage-type sqlite --storage-path /path/to/todos.db ls

# Use environment variables
export TODO_STORAGE_TYPE=sqlite
export TODO_STORAGE_PATH=/path/to/todos.db
todo ls
#+end_src

* Development Status

The application supports both JSON file-based storage and SQLite storage. The
storage interface is defined in the main package where it is used, following
Go's principle of defining interfaces where they are needed.

- [X] [[file:Milestone1.org][Milestone 1]]
- [X] [[file:Milestone2.org][Milestone 2]]
- [X] [[file:Milestone3.org][Milestone 3]]
- [X] [[file:SubtasksFeature.org][Subtasks Feature]]
- [X] [[file:ReorderingFeature.org][Reordering Feature]]
- [ ] [[file:IndentationFeature.org][Indenting and Unindenting]]
