* Todo Application
** DONE Milestone 4
CLOSED: [2025-02-10 Mon 16:05]

It will support subtasks. Sub tasks can have other subtasks recursively.

*** Design for Recursive Subtasks

To support recursive subtasks, we will implement a tree structure where each
task can have multiple subtasks.

**** Data Model

- **Task Structure**:
  - Each task will have an ID, description, state, and a parent ID.
  - State can be one of: `Not Started`, `Partially Done`, `Done`.
  - The parent ID allows for recursive relationships, enabling tasks to have
    subtasks.

- **JSON Storage**:
  - Use a nested JSON structure where tasks can contain an array of subtasks.
  - Example:
    #+begin_src json
    {
      "id": 1,
      "description": "Parent Task",
      "state": 2,  // Partially Done
      "subtasks": [
        {
          "id": 2,
          "description": "Subtask 1",
          "state": 1  // Done
        },
        {
          "id": 3,
          "description": "Subtask 2",
          "state": 0  // Not Started
        }
      ]
    }
    #+end_src

- **SQLite Storage**:
  - Use a single table with a parent_id column for hierarchical relationships
  - Add a sibling_order column to maintain the order of tasks and subtasks
  - Example schema:
    #+begin_src sql
    CREATE TABLE items (
      id TEXT PRIMARY KEY,
      description TEXT NOT NULL,
      state INTEGER NOT NULL,
      parent_id TEXT REFERENCES items(id),
      sibling_order INTEGER NOT NULL
    );
    #+end_src

  - **State Values**:
    - `0`: Not Started
    - `1`: Done
    - `2`: Partially Done

**** Behavior

- **Task Completion**:
  - When a subtask is marked as done, check if all sibling subtasks are done to
    update the parent task's status to `Done`.
  - If any subtask is not done, the parent task should be `Partially Done`.

- **Parent Task Completion**:
  - When a parent task is marked as done, recursively mark all subtasks as done.

- **Parent Task Undo**:
  - When a parent task is undone, recursively mark all subtasks as not started.

*** Implementation Steps
**** DONE Define Task Structure Updates
CLOSED: [2025-02-09 Sun 16:18]
+ [X] Write tests to verify that tasks can be created with a `parent_id` and
  that the state transitions are correctly handled.
+ [X] Update the core data structures to include a `parent_id` and ensure the
  `state` is an integer.

**** DONE Modify JSON Storage
CLOSED: [2025-02-09 Sun 16:20]
+ [X] Write tests to ensure tasks and subtasks are correctly stored and
  retrieved.
+ [X] Update the JSON storage implementation to handle nested tasks.
+ [X] Implement serialization and deserialization logic for tasks with subtasks.

**** DONE Modify SQLite Storage
CLOSED: [2025-02-09 Sun 16:32]
+ [X] Alter the SQLite schema to include the `parent_id` and use integers for
  the `state`.
+ [X] Run the test to see if the schema change does not break the existing
  tests. Fix the tests if they break.
+ [X] Write tests to verify that tasks and subtasks are correctly stored,
  retrieved, and updated.
+ [X] Implement logic to handle recursive relationships using SQL queries.

**** DONE Implement Task Completion Logic
CLOSED: [2025-02-09 Sun 16:33]
+ [X] Write tests to validate that the task status transitions are correct.
+ [X] Develop logic to update task status based on subtask completion.
+ [X] Ensure marking a parent task as done updates all subtasks.

**** DONE Implement Task Undo Logic
CLOSED: [2025-02-09 Sun 17:00]
+ [X] Write tests to ensure that undoing a task correctly updates all related tasks.
+ [X] Implement the undo functionality for tasks with subtasks.
+ [X] Verify that undoing a parent task undoes all subtasks.
+ [X] Ensure that undoing a subtask correctly updates the parent's state.

**** DONE Update Command-Line Interface
CLOSED: [2025-02-09 Sun 17:15]
+ [X] Write tests to validate the CLI operations.
+ [X] Extend the CLI to support operations on subtasks.
+ [X] Implement commands for adding, completing, and undoing tasks and subtasks.
+ [X] Update task display to show subtasks with proper indentation.
+ [X] Support partial task completion state with [-] indicator.

**** DONE Implement SQLite Ordered Subtasks
CLOSED: [2025-02-09 Sun 19:02]
+ [X] Add sibling_order column to maintain task order
+ [X] Modify Save function to store sibling order
+ [X] Update Load function to preserve task order
+ [X] Add test cases for ordered tasks and subtasks
+ [X] Implement descending UUID generation (ff -> ee -> dd -> cc) for testing
+ [X] Verify order preservation with both ascending and descending IDs

**** TODO Documentation and Review
- [ ] Update the README and any other relevant documentation to reflect the new
  features.
- [ ] Conduct code reviews and refactor as necessary to improve code quality and
  maintainability.
